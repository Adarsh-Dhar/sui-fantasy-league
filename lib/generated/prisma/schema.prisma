// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                 String  @id @default(cuid())
  address            String  @unique
  wins               Int     @default(0)
  losses             Int     @default(0)
  teams              Team[]
  matchesAsPlayerOne Match[] @relation("PlayerOne")
  matchesAsPlayerTwo Match[] @relation("PlayerTwo")
}

model Team {
  id               String   @id @default(cuid())
  name             String
  tokens           String[]
  player           Player   @relation(fields: [playerId], references: [id])
  playerId         String
  matchesAsTeamOne Match[]  @relation("TeamOne")
  matchesAsTeamTwo Match[]  @relation("TeamTwo")
}

model Match {
  id        String      @id @default(cuid())
  status    MatchStatus @default(PENDING)
  type      MatchType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  playerOneId String
  playerOne   Player @relation("PlayerOne", fields: [playerOneId], references: [id])

  playerTwoId String?
  playerTwo   Player? @relation("PlayerTwo", fields: [playerTwoId], references: [id])

  teamOneId String
  teamOne   Team   @relation("TeamOne", fields: [teamOneId], references: [id])

  teamTwoId String?
  teamTwo   Team?   @relation("TeamTwo", fields: [teamTwoId], references: [id])

  winnerId String?
  result   MatchResult?
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchType {
  RANDOM
  FRIEND
}

enum MatchResult {
  PLAYER_ONE_WIN
  PLAYER_TWO_WIN
  DRAW
}
