generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                 String  @id @default(cuid())
  address            String  @unique
  wins               Int     @default(0)
  losses             Int     @default(0)
  matchesAsPlayerOne Match[] @relation("PlayerOne")
  matchesAsPlayerTwo Match[] @relation("PlayerTwo")
  teams              Team[]
}

model Team {
  id               String   @id @default(cuid())
  name             String
  tokens           String[]
  playerId         String
  matchesAsTeamOne Match[]  @relation("TeamOne")
  matchesAsTeamTwo Match[]  @relation("TeamTwo")
  player           Player   @relation(fields: [playerId], references: [id])
}

model Match {
  id           String       @id @default(cuid())
  status       MatchStatus  @default(PENDING)
  type         MatchType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  playerOneId  String
  playerTwoId  String?
  teamOneId    String
  teamTwoId    String?
  teamOneScore Float?
  teamTwoScore Float?
  teamOneGain  Float?
  teamTwoGain  Float?
  winnerShare  Float?
  loserShare   Float?
  winnerId     String?
  result       MatchResult?
  duration     Int          @default(60)
  price        Int          @default(1)
  vaultId      String?      @db.Text
  startTime    DateTime?
  endTime      DateTime?
  playerOne    Player       @relation("PlayerOne", fields: [playerOneId], references: [id])
  playerTwo    Player?      @relation("PlayerTwo", fields: [playerTwoId], references: [id])
  teamOne      Team         @relation("TeamOne", fields: [teamOneId], references: [id])
  teamTwo      Team?        @relation("TeamTwo", fields: [teamTwoId], references: [id])
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchType {
  RANDOM
  FRIEND
}

enum MatchResult {
  PLAYER_ONE_WIN
  PLAYER_TWO_WIN
  DRAW
}
